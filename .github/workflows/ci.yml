name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security and dependency audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - uses: actions-rs/install@v0.1
      with:
        crate: cargo-audit
        version: latest
    - name: Run cargo audit
      run: |
        cd wasmwiz
        # Run audit and capture output
        cargo audit --format json > audit-results.json || echo "Audit found vulnerabilities"
        # Check for high/critical vulnerabilities that should fail CI
        if cargo audit --format json | jq -e '.vulnerabilities[] | select(.advisory.severity == "critical" or .advisory.severity == "high")' > /dev/null 2>&1; then
          echo "Critical or high severity vulnerabilities found!"
          cargo audit
          exit 1
        else
          echo "Only medium/low vulnerabilities found - continuing with known tracked issues"
          cargo audit
        fi

  # Linting and formatting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    - name: Check formatting
      run: cd wasmwiz && cargo fmt -- --check
    - name: Run clippy
      run: cd wasmwiz && cargo clippy -- -D warnings

  # Build and test
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: wasmwiz
          POSTGRES_USER: wasmwiz
          POSTGRES_DB: wasmwiz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: wasmwiz/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Set up environment
      run: |
        echo "DATABASE_URL=postgres://wasmwiz:wasmwiz@localhost:5432/wasmwiz_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "AUTH_REQUIRED=false" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        cd wasmwiz
        cargo install sqlx-cli --no-default-features --features postgres
        sqlx migrate run

    - name: Build
      run: cd wasmwiz && cargo build --verbose

    - name: Run tests
      run: cd wasmwiz && cargo test --verbose

  # Docker build and scan (simplified version of original)
  docker:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd wasmwiz
        docker build -t wasmwiz:${{ github.sha }} .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'wasmwiz:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'