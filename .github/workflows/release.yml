name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        type: string
      release_name:
        description: 'Release name'
        required: true
        type: string
      body:
        description: 'Release body'
        required: false
        type: textarea

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Create release artifacts
  build-artifacts:
    name: 📦 Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          wasmwiz/target
        key: ${{ runner.os }}-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: |
        cd wasmwiz
        cargo build --release --target ${{ matrix.target }}

    - name: Package binary (Unix)
      if: runner.os != 'Windows'
      run: |
        cd wasmwiz
        tar -czf wasm-wizard-${{ matrix.name }}.tar.gz -C target/${{ matrix.target }}/release wasm-wizard

    - name: Package binary (Windows)
      if: runner.os == 'Windows'
      run: |
        cd wasmwiz
        7z a wasm-wizard-${{ matrix.name }}.zip ./target/${{ matrix.target }}/release/wasm-wizard.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: wasm-wizard-${{ matrix.name }}
        path: |
          wasmwiz/wasm-wizard-${{ matrix.name }}.tar.gz
          wasmwiz/wasm-wizard-${{ matrix.name }}.zip

  # Build and push Docker image
  docker-release:
    name: 🐳 Build Docker Release Image
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: botzrdev/wasm-wizard
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./wasmwiz
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Generate release notes
  release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    outputs:
      release_body: ${{ steps.release-notes.outputs.body }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release-notes
      run: |
        # Get the tag name
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag_name }}"
        else
          TAG_NAME="${{ github.ref_name }}"
        fi

        # Generate changelog from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGES=$(git log --pretty=format:"* %s (%h)" "$PREVIOUS_TAG..HEAD" | head -20)
        else
          CHANGES=$(git log --pretty=format:"* %s (%h)" -20)
        fi

        # Create release body
        RELEASE_BODY="## What's Changed

$CHANGES

## Installation

### Docker
\`\`\`bash
docker pull botzrdev/wasm-wizard:$TAG_NAME
\`\`\`

### Binary Downloads
Download the appropriate binary for your platform from the assets below.

### From Source
\`\`\`bash
git clone https://github.com/botzrDev/WasmWiz.git
cd WasmWiz/wasmwiz
cargo build --release
\`\`\`

## Security

This release includes security updates. Please see [SECURITY.md](SECURITY.md) for details.

---

**Full Changelog**: https://github.com/botzrDev/WasmWiz/compare/$PREVIOUS_TAG...$TAG_NAME"

        # Escape for multiline output
        RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
        RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
        RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"

        echo "body=$RELEASE_BODY" >> $GITHUB_OUTPUT

  # Create GitHub release
  create-release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-artifacts, docker-release, release-notes]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Get release name
      id: release-name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "name=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
        else
          echo "name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.name }}
        name: ${{ steps.release-name.outputs.name }}
        body: ${{ needs.release-notes.outputs.release_body }}
        files: ./artifacts/**/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update documentation
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') && !contains(github.ref, 'rc')

    steps:
    - uses: actions/checkout@v4

    - name: Update version in README
      run: |
        TAG_NAME="${{ github.ref_name }}"
        sed -i "s|badge/Docker.*-blue|badge/Docker Ready-blue|" README.md
        sed -i "s|wasm-wizard:.*|wasm-wizard:$TAG_NAME|" README.md

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "docs: update version to ${{ github.ref_name }}" || echo "No changes to commit"

    - name: Push documentation updates
      run: |
        git push

  # Notify stakeholders
  notify:
    name: 📢 Release Notification
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && (github.event_name == 'push' && contains(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')

    steps:
    - name: Notify on success
      if: needs.create-release.result == 'success'
      run: |
        echo "🎉 Release ${{ github.ref_name }} created successfully!"
        echo "📦 Artifacts uploaded to GitHub Releases"
        echo "🐳 Docker image pushed to Docker Hub"
        echo "📝 Release notes generated automatically"

    - name: Notify on failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        echo "Please check the workflow logs for details"

    - name: Create notification issue (on failure)
      if: needs.create-release.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `❌ Release Failed - ${{ github.ref_name }}`
          const body = `
          ## Release Failure

          The automated release for **${{ github.ref_name }}** has failed.

          🔗 [View Release Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Possible Issues:
          - Build failures on one or more platforms
          - Docker image build/push failures
          - Release creation failures
          - Artifact upload failures

          ### Next Steps:
          1. Review the workflow logs
          2. Fix any identified issues
          3. Re-run the release workflow
          4. Or create the release manually

          ---
          *This issue was automatically created by the Release workflow*
          `

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['release', 'automated', 'urgent']
          })