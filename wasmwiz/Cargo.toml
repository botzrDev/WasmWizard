# Cargo.toml

[package]
name = "wasmwiz"
version = "0.1.0"
edition = "2024"

[lib]
name = "wasmwiz"
path = "src/lib.rs"

[dependencies]
# Web server framework for high performance
actix-web = "4"

# For handling multipart form data (Wasm file uploads)
actix-multipart = "0.6"

# Core WebAssembly runtime for execution
wasmer = "6.0.1" # Updated to latest stable version
# WASI (WebAssembly System Interface) support for standard I/O
# Using wasmer-wasix for Wasmer v6.x (the modern WASI implementation)
wasmer-wasix = "0.600.1"

# For JSON serialization/deserialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# For generating unique identifiers (UUIDs) for stored Wasm modules and API keys
uuid = { version = "1.8", features = ["v4", "serde"] } # "v4" for random UUIDs, "serde" for serialization

# For asynchronous operations
tokio = { version = "1.38", features = ["full"] } # "full" is convenient for development; can be slimmed down later

# For interacting with PostgreSQL database
# "runtime-tokio-native-tls" for async runtime and TLS support
# "postgres" for PostgreSQL driver
# "uuid" and "chrono" features for direct mapping of UUID and DateTime types
# "macros" for `query!` and `query_as!` macros
# Updated to 0.8.6+ to fix RUSTSEC-2024-0363 binary protocol vulnerability
sqlx = { version = "0.8.6", features = ["runtime-tokio-native-tls", "postgres", "uuid", "chrono", "macros"] }

# For Redis-based distributed rate limiting
redis = { version = "0.24", features = ["tokio-comp", "tokio-native-tls"] }
async-trait = "0.1"

# For hashing API keys (SHA-256)
sha2 = "0.10"

# For date and time handling (e.g., created_at, updated_at timestamps)
chrono = { version = "0.4", features = ["serde"] } # "serde" feature for serialization/deserialization

# For custom error handling with derive macros like `Display` and `Error`
derive_more = { version = "0.99", features = ["display", "error"] }

# For general-purpose error handling, used as the transparent source for ApiError::InternalError
anyhow = "1.0"

# For loading environment variables from a .env file during development
dotenvy = "0.15"

# For structured logging and tracing
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] } # Enables filtering logs by environment variables and JSON output

# For HTML templating (Web UI)
askama = { version = "0.12", features = ["with-actix-web"] }
askama_actix = "0.14"

# For error handling with derive macros
thiserror = "2.0.12"

# For async streaming utilities
futures-util = "0.3"

# For serving static files
actix-files = "0.6"

# For base64 encoding/decoding  
base64 = "0.22"

# For generating secure random API keys
rand = "0.8"

# For hex encoding/decoding
hex = "0.4"

# Security patches for indirect dependencies
# Force updated RSA version to fix RUSTSEC-2023-0071 timing sidechannel attack
# Note: RSA 0.9.x still has the vulnerability but no patched version is available yet
# TODO: Monitor RSA releases for fixed version and update when available
rsa = "0.9.8"  # Latest stable version, 0.10.0-rc.0 available but not stable yet

# Force protobuf to a patched version for RUSTSEC-2024-0437
protobuf = "3.7.2"

# Note: IDNA vulnerability RUSTSEC-2024-0421 exists in deep transitive dependencies
# from Wasmer ecosystem. Cannot be easily patched without breaking compatibility.
# This is being tracked and will be resolved when Wasmer updates their dependencies.
# For now, the risk is minimal as we don't directly use IDNA functionality.

# For Prometheus metrics exposition
actix-web-prom = "0.7"
prometheus = "0.13"

# For system information and resource monitoring
sysinfo = "0.30"

# For static initialization of Prometheus metrics
once_cell = "1.19"

# For CPU detection in production
num_cpus = "1.16"

# For URL-encoded form parsing (e.g., in debug endpoint)
serde_urlencoded = "0.7"

# For bytes manipulation
bytes = "1.6"

[features]
# Enable this feature for test-specific configurations or modules
test = []

# Production optimizations
[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 0
debug = true

# Force consistent dependency versions across workspace
# Note: Using direct dependency specification instead of patches
# to avoid crates.io patch conflicts

[dev-dependencies]
actix-web = { version = "4", features = ["macros"] }
sqlx = { version = "0.8.6", features = ["runtime-tokio-native-tls", "postgres", "uuid", "chrono", "macros"] }
testcontainers = "0.12"
testcontainers-modules = { version = "0.12", features = ["postgres"] }
wasmwiz = { path = ".", features = ["test"] }
