name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: wasm_wizard_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: wasm_wizard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
        
    - name: Run database migrations
      run: |
        cargo install sqlx-cli --no-default-features --features postgres
        sqlx database create --database-url "postgres://wasm_wizard_user:test_password@localhost:5432/wasm_wizard_test"
        sqlx migrate run --database-url "postgres://wasm_wizard_user:test_password@localhost:5432/wasm_wizard_test"
      env:
        DATABASE_URL: postgres://wasm_wizard_user:test_password@localhost:5432/wasm_wizard_test
        
    - name: Check code formatting
      run: cargo fmt -- --check
      
    - name: Run clippy linting
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build project
      run: cargo build --verbose
      
    - name: Run unit tests
      run: cargo test --verbose --lib
      env:
        DATABASE_URL: postgres://wasm_wizard_user:test_password@localhost:5432/wasm_wizard_test
        REDIS_URL: redis://localhost:6379
        API_SALT: test_salt_for_ci
        JWT_SECRET: test_jwt_secret_for_ci_pipeline_runs
        
    - name: Run integration tests
      run: cargo test --verbose --test integration_tests
      env:
        DATABASE_URL: postgres://wasm_wizard_user:test_password@localhost:5432/wasm_wizard_test
        REDIS_URL: redis://localhost:6379
        API_SALT: test_salt_for_ci
        JWT_SECRET: test_jwt_secret_for_ci_pipeline_runs
        
    - name: Run functional tests
      run: cargo test --verbose --test functional_tests
      env:
        DATABASE_URL: postgres://wasm_wizard_user:test_password@localhost:5432/wasm_wizard_test
        REDIS_URL: redis://localhost:6379
        API_SALT: test_salt_for_ci
        JWT_SECRET: test_jwt_secret_for_ci_pipeline_runs

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit --locked
      
    - name: Run cargo audit
      run: cargo audit
      
    - name: Run cargo audit fix (check for auto-fixable issues)
      run: cargo audit fix --dry-run

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check code formatting
      run: cargo fmt -- --check
      
    - name: Run clippy with all features
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Check for unused dependencies
      run: |
        cargo install cargo-udeps --locked
        cargo +nightly udeps --all-targets

  dependency-check:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install dependency scanning tools
      run: |
        cargo install cargo-audit --locked
        cargo install cargo-deny --locked
        
    - name: Run cargo audit
      run: cargo audit
      
    - name: Check license compliance
      run: cargo deny check licenses
      
    - name: Check for banned dependencies
      run: cargo deny check bans
      
    - name: Check dependency sources
      run: cargo deny check sources

  build-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, security-audit, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: wasm-wizard:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm wasm-wizard:test --version || echo "Version check completed"

  staging-deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-audit, code-quality, build-docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    # environment: staging  # Uncomment after creating 'staging' environment in GitHub repo settings
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/wasm-wizard:staging-${{ github.sha }}
          ${{ secrets.REGISTRY_URL }}/wasm-wizard:staging-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # This would typically involve kubectl commands or cloud deployment
        # kubectl set image deployment/wasm-wizard wasm-wizard=${{ secrets.REGISTRY_URL }}/wasm-wizard:staging-${{ github.sha }}

  production-deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-audit, code-quality, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # environment: production  # Uncomment after creating 'production' environment in GitHub repo settings
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/wasm-wizard:${{ github.sha }}
          ${{ secrets.REGISTRY_URL }}/wasm-wizard:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # This would involve actual deployment commands
        # kubectl set image deployment/wasm-wizard wasm-wizard=${{ secrets.REGISTRY_URL }}/wasm-wizard:${{ github.sha }}
        
    - name: Create deployment record
      run: |
        echo "Recording deployment: ${{ github.sha }} at $(date)"
        
    - name: Notify deployment success
      run: |
        echo "Production deployment successful!"
